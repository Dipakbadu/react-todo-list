{"version":3,"sources":["components/Header.jsx","components/ToDo.jsx","components/ToDoList.jsx","components/ToDoForm.jsx","App.js","reportWebVitals.js","index.js"],"names":["Header","Navbar","bg","variant","Brand","href","ToDo","todo","handleToggle","updateTodo","useState","edit","setEdit","handleClick","e","preventDefault","currentTarget","id","onSubmit","value","className","InputGroup","Form","Control","type","defaultValue","onChange","updateDetails","placeholder","Append","Button","Card","ListGroup","Prepend","Checkbox","aria-label","checked","complete","name","onClick","Item","task","ToDoList","toDoList","handleFilter","map","style","margin","ToDoForm","addTask","userInput","setUserInput","App","data","setToDoList","Container","copy","length","todoId","newTask","aa","item","mapped","Number","filtered","filter","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4bbf9f14.chunk.js","sourcesContent":["import React from 'react'\nimport Navbar from 'react-bootstrap/Navbar'\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nfunction Header () {\n  return (\n    <>\n      <Navbar bg=\"dark\" variant=\"dark\">\n        <Navbar.Brand href=\"#home\">\n          To Do List\n        </Navbar.Brand>\n      </Navbar>\n    </>\n      )\n    }\n    export default Header","import React, { useState } from 'react'\nimport './style.css'\nimport ListGroup from 'react-bootstrap/ListGroup'\nimport InputGroup from 'react-bootstrap/InputGroup'\nimport Button from 'react-bootstrap/Button'\nimport Form from 'react-bootstrap/Form'\nimport Card from 'react-bootstrap/Card'\nconst ToDo = ({todo, handleToggle,updateTodo }) => {\n\n  const [edit, setEdit] = useState('')\n\n  const handleClick = (e) => {\n    e.preventDefault()\n    handleToggle(e.currentTarget.id)\n  }\n  const handleUpdate = (e) => {\n    e.preventDefault()\n    const updateDetails = {\n      id: edit.id,\n      value: e.currentTarget.value\n    }\n    setEdit(updateDetails)\n  }\n\n  const submitUpdate = (e) => {\n    e.preventDefault()\n    updateTodo(edit.id, edit.value)\n    setEdit({\n      id: null,\n      value: ''\n    })\n  }\n\n  if(edit.id) {\n    return <form onSubmit={submitUpdate} className = \"mt-3\">\n    <InputGroup className=\"mb-2\">\n      <Form.Control \n        type=\"text\"\n        defaultValue={edit.value}\n        onChange={handleUpdate}\n        placeholder=\"Enter Your Task...\"\n      />\n      <InputGroup.Append>\n        <Button type = \"submit\" variant=\"outline-secondary\">Edit</Button>\n      </InputGroup.Append>\n    </InputGroup>\n  </form>\n  }\n\n  return (\n    <>\n    <Card>\n      <ListGroup variant=\"flush\">\n        <InputGroup className=\"mb-3\">\n        <InputGroup.Prepend>\n          <InputGroup.Checkbox \n            aria-label=\"Checkbox for following text input\"\n            checked={todo.complete}\n            onChange = {handleClick}\n          />\n        </InputGroup.Prepend>\n        <ListGroup id={todo.id} key={todo.id} name=\"todo\" value={todo.id} onClick={handleClick} className={todo.complete ? \"todo strike\" : \"todo\"}>\n          <ListGroup.Item variant=\"secondary\">\n          {todo.task}\n          </ListGroup.Item>\n        </ListGroup>\n        <InputGroup.Append>\n          <Button variant=\"outline-secondary\" \n            onClick={() => setEdit({id: todo.id, value: todo.task})} >\n            Edit\n          </Button>\n        </InputGroup.Append>\n      </InputGroup>\n    </ListGroup>\n  </Card>\n  </>\n  )\n}\n\nexport default ToDo ","import React from 'react'\nimport ToDo from './ToDo'\n\nconst ToDoList = ({toDoList, handleToggle, handleFilter, updateTodo}) => {\n  return (\n    <div>\n      {toDoList.map(todo => {\n        return (\n          <div> \n            <ToDo todo = {todo} key={todo.id} updateTodo={updateTodo} handleToggle = {handleToggle} handleFilter = {handleFilter} />\n          </div>\n        )\n      })}\n      <button style={{margin: '20px'}} key = {toDoList.id} onClick={handleFilter}>Clear Completed</button>\n    </div>\n  )\n}\nexport default ToDoList","import React, { useState } from \"react\";\nimport Form from 'react-bootstrap/Form'\nimport InputGroup from 'react-bootstrap/InputGroup'\nimport Button from 'react-bootstrap/Button'\n\nconst ToDoForm = ({ addTask }) => {\n  const [userInput, setUserInput] = useState(\"\")\n\n  const handleChange = (e) => {\n    setUserInput(e.currentTarget.value)\n  }\n\n  const handleSubmit = (e) => {\n    e.preventDefault()\n    addTask(userInput)\n    setUserInput(\"\")\n  }\n\n  return (\n    <form onSubmit={handleSubmit} className = \"mt-3\">\n      <InputGroup className=\"mb-2\">\n        <Form.Control \n          type=\"text\"\n          value = {userInput}\n          placeholder=\"Enter Your Task...\"\n          onChange = {handleChange}\n        />\n        <InputGroup.Append>\n          <Button type = \"submit\" variant=\"outline-secondary\">Add</Button>\n        </InputGroup.Append>\n      </InputGroup>\n    </form>\n  )\n}\n\nexport default ToDoForm;\n","import Header from './components/Header'\nimport React, {useState} from 'react'\nimport data from './data.json'\nimport ToDOList from './components/ToDoList'\nimport ToDoForm from './components/ToDoForm'\nimport Container from 'react-bootstrap/Container'\n\n\nfunction App() {\n  const [ toDoList, setToDoList ] = useState(data)\n\n  const handleToggle = (id) => {\n    let mapped = toDoList.map(task => {\n      return task.id === Number(id) ? { ...task, complete: !task.complete } : { ...task};\n    });\n    setToDoList(mapped);\n  }\n  const updateTodo = (todoId, newTask) => {\n    // let aa = prev =>prev.map(item =>(item.id) === todoId ? newTask : item)\n    let aa = toDoList.map(item => {\n      return (item.id) === todoId ? { id: item.id, task: newTask, complete: item.complete } : item;\n    });\n    setToDoList(aa)\n  }\n\n  const handleFilter = () => {\n    let filtered = toDoList.filter(task => {\n      return !task.complete;\n    });\n    setToDoList(filtered);\n  }\n  const addTask = (userInput) => {\n    let copy = [...toDoList]\n    copy = [...copy, {id:toDoList.length + 1, task: userInput, complete: false}]\n    setToDoList(copy)\n  }\n  return (    \n    <Container className = \"mt-3\">\n      <Header />\n      <ToDoForm addTask = {addTask} />\n      <ToDOList  toDoList = {toDoList} updateTodo = {updateTodo} handleToggle = {handleToggle} handleFilter = {handleFilter} />\n    </Container>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}